generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  salt             String
  hash             String
  role             UserRole       @default(STUDENT)
  status           UserStatus     @default(ACTIVE)
  firstName        String
  lastName         String
  phone            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  avatar           String         @default("https://www.gravatar.com/avatar/default?d=identicon")
  lastLogin        DateTime?
  admin            Admin?
  comments         Comment[]
  counselor        Counselor?
  forumPosts       ForumPost[]
  sentMessages     Message[]      @relation("SentMessages")
  student          Student?
  teacher          Teacher?
  conversations    Conversation[] @relation("ConversationToUser")
  receivedMessages Message[]      @relation("ReceivedMessages")

  @@map("users")
}

model Student {
  id                  String              @id @default(uuid())
  userId              String              @unique
  quizzes             Quiz[]
  attempts            QuizAttempt[]
  emergencyContacts   EmergencyContact[]
  goals               Goal[]
  initialAssessment   InitialAssessment?
  interventions       Intervention[]
  journals            Journal[]
  moodEntries         MoodEntry[]
  reactions           Reaction[]
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  surveys             SurveyResponse[]
  weeklyGoalSummaries WeeklyGoalSummary[]

  @@map("students")
}

model EmergencyContact {
  id           String  @id @default(uuid())
  studentId    String
  name         String
  relationship String
  phone        String
  isPrimary    Boolean @default(false)
  student      Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@map("emergency_contacts")
}

model Goal {
  id          String   @id @default(uuid())
  studentId   String
  title       String
  isCompleted Boolean  @default(false)
  weekNumber  Int
  year        Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, weekNumber, year])
  @@map("goals")
}

model WeeklyGoalSummary {
  id         String     @id @default(uuid())
  studentId  String
  weekNumber Int
  year       Int
  totalGoals Int        @default(0)
  completed  Int        @default(0)
  percentage Float
  status     GoalStatus
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, weekNumber, year])
  @@map("weekly_goal_summaries")
}

model Teacher {
  id        String     @id @default(uuid())
  userId    String     @unique
  reactions Reaction[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Counselor {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  interventions Intervention[]
  reports       Report[]

  @@map("counselors")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Survey {
  id          String           @id @default(uuid())
  title       String
  description String?
  questions   Json
  createdAt   DateTime         @default(now())
  type        SurveyType       @default(DAILY)
  responses   SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id         String   @id @default(uuid())
  studentId  String
  surveyId   String
  answers    Json
  score      Float
  createdAt  DateTime @default(now())
  percentage Float
  zone       String
  phDate     String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  survey     Survey   @relation(fields: [surveyId], references: [id])

  @@index([studentId, phDate])
  @@map("survey_responses")
}

model Journal {
  id        String   @id @default(uuid())
  studentId String
  content   String
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("journals")
}

model MoodEntry {
  id        String   @id @default(uuid())
  studentId String
  moodLevel Int
  notes     String?
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, createdAt])
  @@map("mood_entries")
}

model InitialAssessment {
  id              String   @id @default(uuid())
  studentId       String   @unique
  assessmentData  Json
  createdAt       DateTime @default(now())
  anxietyScore    Float
  depressionScore Float
  stressScore     Float
  totalScore      Float
  answers         Json
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("initial_assessments")
}

model Intervention {
  id          String             @id @default(uuid())
  counselorId String
  studentId   String
  title       String
  description String
  status      InterventionStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  counselor   Counselor          @relation(fields: [counselorId], references: [id])
  student     Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("interventions")
}

model ForumPost {
  id          String     @id @default(uuid())
  title       String
  content     String
  authorId    String
  createdAt   DateTime   @default(now())
  isPublished Boolean    @default(false)
  images      Json
  comments    Comment[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@map("forum_posts")
}

model Reaction {
  id        String    @id @default(uuid())
  postId    String
  studentId String?
  teacherId String?
  type      String    @default("SPARK")
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  student   Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher   Teacher?  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([postId, type, studentId, teacherId])
  @@map("reactions")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Resource {
  id          String       @id @default(uuid())
  title       String
  description String?
  url         String
  type        ResourceType
  createdAt   DateTime     @default(now())

  @@map("resources")
}

model Quiz {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  studentId     String?
  correctAnswer Int
  explanation   String?
  options       String[]
  points        Int
  question      String
  student       Student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attempts      QuizAttempt[]
}

model QuizAttempt {
  id             String   @id @default(uuid())
  quizId         String
  studentId      String
  score          Int
  createdAt      DateTime @default(now())
  selectedAnswer Int
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([studentId])
}

model Report {
  id                     String    @id @default(uuid())
  counselorId            String
  studentId              String?
  reportType             String
  format                 String
  startDate              DateTime
  endDate                DateTime
  includeCharts          Boolean   @default(false)
  includeTables          Boolean   @default(false)
  includeRecommendations Boolean   @default(false)
  createdAt              DateTime  @default(now())
  counselor              Counselor @relation(fields: [counselorId], references: [id], onDelete: Cascade)

  @@index([counselorId])
  @@map("reports")
}

model Conversation {
  id           String    @id @default(uuid())
  title        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isGroup      Boolean   @default(false)
  messages     Message[]
  participants User[]    @relation("ConversationToUser")

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  conversationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  recipients     User[]       @relation("ReceivedMessages")

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

enum UserRole {
  STUDENT
  TEACHER
  COUNSELOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum GoalStatus {
  COMPLETED
  INCOMPLETE
  EMPTY
}

enum SurveyType {
  DAILY
  WEEKLY
  INITIAL
}

enum InterventionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ResourceType {
  MEDITAION
  ARTICLE
  VIDEO
  EXERCISE
}
