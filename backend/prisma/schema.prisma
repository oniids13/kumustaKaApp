
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Core User Models

model User {
  id        String   @id @default(uuid())
  email     String  @unique
  salt      String
  hash      String
  role      UserRole  @default(STUDENT)
  firstName String
  lastName  String
  phone     String
  avatar String @default("https://www.gravatar.com/avatar/default?d=identicon")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Role-specific relations
  student Student?
  teacher Teacher?
  counselor Counselor?
  admin    Admin?

  // Relation fields
  forumPosts ForumPost[]
  comments   Comment[]

  @@map("users")
}

enum UserRole {
  STUDENT
  TEACHER
  COUNSELOR
  ADMIN
}

// Role-specific Profiles

model Student {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  initialAssessment InitialAssessment?
  surveys   SurveyResponse[]
  journals  Journal[]
  moodEntries MoodEntry[]
  interventions  Intervention[]
  emergencyContacts EmergencyContact[]
  reactions Reaction[]

  @@map("students") 
}


model EmergencyContact {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  name      String
  relationship String
  phone     String
  isPrimary Boolean @default(false)

  @@index([studentId])
  @@map("emergency_contacts")
}


model Teacher {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  reactions Reaction[]



  @@map("teachers")
}

model Counselor{
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  interventions Intervention[]

  @@map("counselors")
}

model Admin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("admins")
}

// Mental Health Features

model Survey {
  id        String   @id @default(uuid())
  title     String
  description String?
  questions Json
  createdAt DateTime @default(now())
  responses SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  survey    Survey   @relation(fields: [surveyId], references: [id])
  surveyId  String
  answers   Json
  score     Float
  createdAt DateTime @default(now())

  @@index([studentId, surveyId, createdAt])

  @@map("survey_responses")
}

model Journal {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  content    String
  isPrivate Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journals")
}

model MoodEntry {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  moodLevel Int
  notes    String?
  createdAt DateTime @default(now())

  @@index([studentId, createdAt]) 

  @@map("mood_entries")
}

model InitialAssessment {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String @unique
  assessmentData Json
  anwers  Json
  score   Float
  createdAt DateTime @default(now())

  @@map("initial_assessments")
}

// Counselor Interventions
model Intervention {
  id        String   @id @default(uuid())
  counselor Counselor @relation(fields: [counselorId], references: [id])
  counselorId String
  student   Student   @relation(fields: [studentId], references: [id])
  studentId String
  title      String
  description     String
  status    InterventionStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interventions")
}

enum InterventionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Discussion Forum
model ForumPost {
  id        String   @id @default(uuid())
  title     String
  content    String
  images    Json
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments Comment[]
  reactions Reaction[]
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())


  @@map("forum_posts")
}

model Reaction {
  id String @id @default(uuid())
  post  ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String?
  type  String  @default("SPARK")
  createdAt DateTime @default(now())

  @@unique([postId, type, studentId, teacherId])
  @@map("reactions")

}

model Comment {
  id        String   @id @default(uuid())
  content    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  
  @@map("comments")
}


// Resource Library
model Resource {
  id        String   @id @default(uuid())
  title     String
  description String?
  url       String
  type    ResourceType
  createdAt DateTime @default(now())


  @@map("resources")
}

enum ResourceType {
  MEDITAION
  ARTICLE
  VIDEO
  EXERCISE
}

